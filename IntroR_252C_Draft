---
title: "Introduction_to_R_252C"
author: "Zachary Butzin-Dozier"
date: "7/30/2019"
output: pdf_document
---
Adapted from material created by Jade Benjamin-Chung


```{r}
# Load the dplyr package
library(dplyr)
```
Data analysis exercises in this course use data from the WASH Benefits Bangladesh trial. The trial assessed whether water, sanitation, handwashing, and nutrition interventions delivered separately or together could reduce child diarrhea and/or improve child growth. The trials used a cluster- and block-randomized design. Within each geographic block, 8 village clusters were randomized to a treatment or conrtol arm. See Luby et al. 2018 for full details (doi: http://dx.doi.org/10.1016/)

In this first exercise we will calculate the prevalence of diarrhea in different treatment arms after the interventions were delivered. 

The data and codebooks are publicly available here: https://osf.io/pqzj5/

```{r}
# Load the diarrhea dataset:
d = read.csv("washb-bangladesh-diar-public.csv")

# Load the dataset with treatment data
#remove this line of code
tr = read.csv("washb-bangladesh-tr-public.csv")
```

Next let's merge the two datasets together. This will allow us to calculate the prevalence of diarrhea in different treatment arms (e.g., water, sanitation, handwashing, etc.)
```{r}
d_tr = left_join(d, tr, by=c("block","clusterid"))
```

Now let's filter to only keep the rows for diarrhea measurements after the interventions were delivered.The svy variable includes values 0, 1, 2. We are going to drop the 0 values, which indicate the time period before interventions were delivered. 
```{r}
d_tr = d_tr %>% filter(svy!=0)
```

Now we are going to drop children with missing values in the diarrhea variable from the dataset. This assumes that they were missing completely at random - i.e., that there are no characteristics associated with whether a child was missing diarrhea measurement. 
```{r}
d_tr = d_tr %>% filter(!is.na(diar7d))
# Take a look at the first 6 rows of the merged dataset with the command "head":
head(d_tr)
```

```{r}
# Load okR autograder
devtools::source_gist(id='f3e5c050f617990f4f255d1aada0f396', filename='hw_prev.ok.R', quiet = TRUE)
AutograderInit()
```

To count the number of people with the disease, the code below uses the pipe operator %>% to perform an operation on the dataframe df. The pipe operator allows us to run a series of actions on our data.frame df. The pipe separates each action, and these actions are established using functions (filter and summarise below) that are like verbs in a sentence.

First, we filter the dataframe to only include rows where diar7d==1. Then the next pipe indicates that the summarise command is performed on the filtered dataset. In this filtered dataset, we count the number of rows using the summarise(n_with_diarrhea=n()) command. summarise can be used for a variety of calculations, such as the mean. n() is used with summarise to count rows. Below we label the result n_with_disease. We then include a line with people_with_disease on its own, which tells R to display the contents of this object.

In general, it is a good practice to keep your code tidy and organized. This makes it easier to read and understand and also easier to catch mistakes. One way to keep your code tidy is to use a line break after each pipe. Click the check button to run the code.

```{r}
#Calculate the number of children withdiarrhea across all children in the dataset (ie., not stratifing by the treatment variable). Use the variable diar7d for diarrhea. Save your result in an object called p1. Label the result inside p1 as n_with_diarrhea
p1 = d_tr %>%
  filter(diar7d==1) %>%
  summarise(n_with_diarrhea=n())
p1
```
Problem 1: Calculate the number of children without diarrhea across all children in the dataset (ie., not stratifing by the treatment variable). Use the variable diar7d for diarrhea. Save your result in an object called p2.  Label the result inside p1 as n_without_diarrhea
```{r}
p2 = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"
p2

# Check your answer
CheckProblem2()
```
```{r}
# Problem 3: Calculate diarrhea prevalence in the whole dataset (ignoring treatment arm) and save it in an object called prevalence.

prevalence = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"

# Check your answer
CheckProblem3()
```
Problem 4: Now let's get counts of whether children did or did not have diarrhea in each treatment arm. In the tutorial, this created a 2x2 table for us. Here, since the WASH Benefits trial, there were 7 different arms (6 intervention + control) create a data frame with 14 rows (two for each arm). The first column is called "tr" for treatment. The second column is called "diar7d" and includes 0 for children without diarrhea and 1 for children with diarrhea. The third column is called "n" and includes the number of children with or without diarrhea in that arm. 
```{r}
# Hint: the row for Control with no diarrhea should be this: 
# tr              diar7d     n
# Control              0  3782
#-----------------------------------------------
diar_tr_table = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"
diar_tr_table

# Check your answer
CheckProblem4()
```


Problem 5: Calculate the diarrhea prevalence in each treatment arm. You will need to combine
different commands used in this problem set to calculate this. Save the results in an object
called prevalence_tr. It should have 7 rows (one for each treatment) and two columns. The first 
column should be for the treatment name and the second should be for the prevalence. 
```{r}
prevalence_tr = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"
prevalence_tr

# Check your answer
CheckProblem5()
```

Problem 6: Examine the results in prevalence_tr. Which arm had the lowest diarrhea prevalence? Save the name of the treatment arm using the same spelling as in the treatment label in prevalence_tr to indicate your answer in an object called p6. (e.g., p6 = "Control")
```{r}
p6 = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"

# Check your answer
CheckProblem6()
```

Problem 7: Which treatment arm had prevalence closest to the prevalence in the control arm? Save the name of the treatment arm using the same spelling as in the treatment label in prevalence_tr to indicate your answer in an object called p6. (e.g., p7 = "Control")
```{r}
p7 = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"

# Check your answer
CheckProblem7()
```

#Incidence - not sure if this is necessary!

# Load okR autograder
```{r}
devtools::source_gist(id='7770fec06a23b19595ce8d6997952e04', filename='hw3_inc.ok.R', quiet = TRUE)
AutograderInit()
```

In this problem set we will calculate incidence using different formulas. 

```{r}
# Read in the data for this assignment. 
# The data is saved as a .RData file, so you need 
# to use the load command to load the data. 
# Fill the R data file name in the quotes below 
# without the data directory information.
load(paste0("data/hw3_incidence.RData"))
```

#################################################
# Section 1: Use the Kaplan-Meier method 
# to calculate the incidence in the data
# frame called "km"
#################################################
# First, display the data.frame "km"
km

#-----------------------------------------------
# Problem 1: calculate conditional risk as a new 
# column called "cond_risk" in the km dataframe
#-----------------------------------------------
km = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"

# Check your answer
CheckProblem1()

#-----------------------------------------------
# Problem 2: calculate conditional survival as a new 
# column in the km dataframe called cond_surv
#-----------------------------------------------
km = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"

# Check your answer
CheckProblem2()

#-----------------------------------------------
# Problem 3: calculate cumulative risk and save it  
# as a scalar named km_cum_risk
#-----------------------------------------------
km_cum_risk = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"

# Check your answer
CheckProblem3()

#-----------------------------------------------
# Problem 4: calculate cumulative survival and save it
# as a scalar named km_cum_surv
#-----------------------------------------------
km_cum_surv = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"

# Check your answer
CheckProblem4()

#################################################
# Section 2: Use the Density method 
# to calculate the incidence in the data
# frame called "dm"
#################################################
# display the data.frame "dm"
dm

#-----------------------------------------------
# Problem 5: calculate person-time using a formula that 
# assumes withdrawals occur halfway through each
# interval. Withdrawals are indicated in the column "W".
#-----------------------------------------------
delta_t=2
dm = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"

# Check your answer
CheckProblem5()

#-----------------------------------------------
# Problem 6: calculate the conditional risk as a new 
# column in the dm dataframe
#-----------------------------------------------
dm = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"

# Check your answer
CheckProblem6()

#-----------------------------------------------
# Problem 7: calculate cumulative risk  and save it  
# as a scalar named dm_cum_risk
#-----------------------------------------------
dm_cum_risk = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"

# Check your answer
CheckProblem7()

#-----------------------------------------------
# Problem 8: calculate cumulative survival and save it  
# as a scalar named dm_cum_surv
#-----------------------------------------------
dm_cum_surv = "<<<<<<<<<<<<< YOUR CODE HERE >>>>>>>>>>>>>>>"

# Check your answer
CheckProblem8()


# --------------------------------------------
# Check your total score
MyTotalScore()
# --------------------------------------------

